Цикломатическая сложность. Расчет из командной строки.

Для боевой базы это небыстрый процесс, т.к. в ней много кода.

Используем файл cyclo.os. Рядом лежит файл Cyclo_KrapivinAndrey.os, это немного доработанная версия, в учебном курсе не используется
Скачана с форума xdd.silverbulleters.org из темы Блок9

Запуск.
Кладем cyclo.os в папку tools, переходим обратно в папку trade и выполняем команду
oscript ./tools/cyclo.os src out/cyclo.txt

В файле cyclo.txt увидим результат, например:

ИНФОРМАЦИЯ - Я расчётчик цикломатической сложности
ИНФОРМАЦИЯ - Поиск файлов...
ИНФОРМАЦИЯ - Анализ файла E:\workspace\git\trade\src\cf\CommonModules\ОбщийМодуль1\Ext\Module.bsl...
ИНФОРМАЦИЯ - Анализ файла E:\workspace\git\trade\src\cf\Documents\ПриходнаяНакладная\Ext\ObjectModule.bsl...

Создаем задачу в Jenkins

1. Создать новый item, тип - свободная конфигурация, имя - cyclo
	Эту задачу будем вызывать из сборочной линии
2. Переходим в настройки задачи
	ротация логов - 10
	включить timestamps
	включить получение репозитория
	ограничить выполнение на узлах с меткой bdd
3. Добавить шаг сборки "Выполнить команду Windows".
	В окне команды пишем:
	chcp 65001
	oscript ./tools/cyclo.os src cyclo.txt
	(каталог out здесь убрали, т.к. в сборочной версии репозитория его нет)
4. Выполняем задачу
	в сборочной директории появится файл  cyclo.txt
	
Включаем расчет в сборочную линию.

В jenkinsfile Добавляем новый stage с названием "Статический анализ"

		stage ('Статический анализ'){
            steps {
                script {
                    if (env.BUILD_NUMBER.endsWith("0")) { //это условие ограничивает запуск задачи только сборкой, номер которой оканчивается на ноль, т.е. каждой десятой
					//если не использовать условие, то шаг можно объявить без обертки script
                        build job: 'cyclo', wait: false
                    }
                }
            }
		}
		
Сейчас эта задача не будет запускаться параллельно со pipe-line.
Увеличим количество параллельно выполняемых задач.
Зайдем в Узлы, откроем подчиненный, затем его Настройки.
В Реквизите "Количество процессов-исполнителей" укажем значение 2.
Сейчас задача запустится параллельно.


Дублирование кода. Расчет из командной строки.
COPY-PASTE-DETECTOR

Установить Node.js, стабильную версию. Проверить, что включен к установке npm.
Через npm установить плагин cpd (copy-paste-detector)

> npm install -g copy-paste-detector

(-g означает, что установка делается глобальная)

Запускаем проверку.
> cpd -d src -i *.bsl -r pmd -f cpd.xml
Получим ошибку, связанную  с инициализацией парсера PHP.
Исправить:
1. Установить php
2. Удалить парсер
Пойдем по варианту 2.
Узнать куда установилась утилита "cpd"
> where cpd
Путь к парсеру примерно такой:
c:\Users\18232\AppData\Roaming\npm\node_modules\copy-paste-detector\lib\parser\
Удаляем файл php.js
После работы утилита созадет файл cpd.xml (параметр -f)

Создаем задачу в Jenkins

Ставим плагин DRY Plug-in
Пробуем установить без перезагрузки. Если какой-то плагин из зависимостей требует перезапуска, включим флажок "Перезапустить Jenkins по окончанию установки..."

Создаем новую задачу, имя cpd, тип - "Со свободной конфигурацией"
Ротация логов - 10 сборок
Ограничить выполнение узлами с меткой bdd
Включить получение исходного кода из git-репозитория.
Добавить timestamps.
Добавит новый шаг "Выполнение команды Windows"
cpd -d src -i *.bsl -r pmd -f cpd.xml

Добавляем послесборочный шаг "Publish duplicate code analysis results"
В поле "Duplicate code results" пишем имя файла cpd.xml
Добавляем расширенный параметр, пока всего один - "Default encoding"
Там пишем UTF-8
Готово, можно выполнять.
Если будет ошибка, то возможно slave-node не видит утилиту cpd, т.к. не обновил path.
Нужно перезапустить подчиненный узел.
В логах будет видно шаги [cpd] и [DRY]
Заходим в задачу, затем в номер сборки и видим там новый тэг "Duplicate code",
а также справа появится диаграмма "Duplicate code trend".
В тэге "Duplicate code" будет список модулей, где нашли дубли.

Данная утилита в случае обнаружения дублирования кода взводит в консоли флаг ошибки.
Это можно проверить, выполнив в консоли из каталога сборки команду
> echo %ERRORLEVEL%
Там будет число, отличное от нуля.

Из-за этого сборка будет падать с ошибкой. Чтобы это исправить, добавим "|| exit 0" в команду.
В настройках задачи, там где у нас единственный шаг, пишем:
cpd -d src -i *.bsl -r pmd -f cpd.xml || exit 0
Теперь задача не будет падать.


Добавление в сборочную линию.
Добавляем в ту же stage:

	stage ('Статический анализ'){
            steps {
                script {
                    //if (env.BUILD_NUMBER.endsWith("3")) {
                        build job: 'cyclo', wait: false
                        build job: 'cpd', wait: false
                   // }
                }


                
            }
        }